package sys

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/lefeck/go-bigip"
	"strings"
	"time"
)

// License holds the configuration of a single License.
type License struct {
	Kind     string `json:"kind"`
	SelfLink string `json:"selfLink"`
	Entries  map[string]struct {
		NestedStats struct {
			Entries map[string]struct {
				Description string `json:"description"`
			}
		} `json:"nestedStats"`
	} `json:"entries"`
}

type AutoGenerated struct {
	Kind     string `json:"kind"`
	SelfLink string `json:"selfLink"`
	Entries  struct {
		HTTPSLocalhostMgmtTmSysLicense0 struct {
			NestedStats struct {
				Entries struct {
					DailyRenewNotifPeriod struct {
						Description string `json:"description"`
					} `json:"dailyRenewNotifPeriod"`
					LicenseEndDate struct {
						Description string `json:"description"`
					} `json:"licenseEndDate"`
					LicenseStartDate struct {
						Description string `json:"description"`
					} `json:"licenseStartDate"`
					LicensedOnDate struct {
						Description string `json:"description"`
					} `json:"licensedOnDate"`
					LicensedVersion struct {
						Description string `json:"description"`
					} `json:"licensedVersion"`
					MaxPermittedVersion struct {
						Description string `json:"description"`
					} `json:"maxPermittedVersion"`
					MinPermittedVersion struct {
						Description string `json:"description"`
					} `json:"minPermittedVersion"`
					PlatformID struct {
						Description string `json:"description"`
					} `json:"platformId"`
					RegistrationKey struct {
						Description string `json:"description"`
					} `json:"registrationKey"`
					ServiceCheckDate struct {
						Description string `json:"description"`
					} `json:"serviceCheckDate"`
					HTTPSLocalhostMgmtTmSysLicense0ActiveModules struct {
						NestedStats struct {
							Entries struct {
								HTTPSLocalhostMgmtTmSysLicense0ActiveModules22BIGIP20VE20LAB22 struct {
									NestedStats struct {
										Entries struct {
											FeatureModules struct {
												Description string `json:"description"`
											} `json:"featureModules"`
											Key struct {
												Description string `json:"description"`
											} `json:"key"`
										} `json:"entries"`
									} `json:"nestedStats"`
								} `json:"https://localhost/mgmt/tm/sys/license/0/active-modules/%22BIG-IP,%20VE,%20LAB%22"`
							} `json:"entries"`
						} `json:"nestedStats"`
					} `json:"https://localhost/mgmt/tm/sys/license/0/active-modules"`
				} `json:"entries"`
			} `json:"nestedStats"`
		} `json:"https://localhost/mgmt/tm/sys/license/0"`
	} `json:"entries"`
}

func (l License) ServiceCheckDate() time.Time {
	for _, entry := range l.Entries {
		innerEntry, ok := entry.NestedStats.Entries["serviceCheckDate"]
		if !ok {
			continue
		}
		t, err := time.Parse("2006/01/02", innerEntry.Description)
		if err != nil {
			break
		}
		return t
	}
	return time.Time{}
}

func (l License) RegistrationKey() string {
	for _, entry := range l.Entries {
		innerEntry, ok := entry.NestedStats.Entries["registrationKey"]
		if !ok {
			continue
		}
		return innerEntry.Description
	}
	return ""
}

// LicenseEndpoint represents the REST resource for managing License.
const LicenseEndpoint = "license"

// LicenseResource provides an API to manage License configurations.
type LicenseResource struct {
	b *bigip.BigIP
}

// Get retrieves the details of a single License by node name.
func (r *LicenseResource) Get() (*License, error) {
	var item License
	res, err := r.b.RestClient.Get().Prefix(bigip.GetBaseResource()).ResourceCategory(bigip.GetTMResource()).ManagerName(SysManager).
		Resource(LicenseEndpoint).DoRaw(context.Background())
	if err != nil {
		return nil, err
	}
	if err := json.Unmarshal(res, &item); err != nil {
		return nil, fmt.Errorf("failed to unmarshal JSON data: %s\n", err)
	}
	return &item, nil
}

type licenseKey struct {
	Command         string `json:"command"`
	RegistrationKey string `json:"registrationKey"`
}

// The Activate method activates a license using the given registration key.
func (r *LicenseResource) Activate(registrationKey string) error {
	item := licenseKey{
		Command:         "install",
		RegistrationKey: registrationKey,
	}

	jsonData, err := json.Marshal(item)
	if err != nil {
		return fmt.Errorf("failed to marshal JSON data: %w", err)
	}
	jsonString := string(jsonData)
	_, err = r.b.RestClient.Post().Prefix(bigip.GetBaseResource()).ResourceCategory(bigip.GetTMResource()).ManagerName(SysManager).
		Resource(LicenseEndpoint).Body(strings.NewReader(jsonString)).DoRaw(context.Background())
	if err != nil {
		return err
	}
	return nil
}
